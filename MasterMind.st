SimpleButtonMorph subclass: #AnswerButton	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'MasterMind'!!AnswerButton methodsFor: 'initialization' stamp: 'Dario Marvin 1/8/2018 13:12'!initialize	"comment stating purpose of message"	super initialize.	self label: ''. 	self borderWidth: 2. 	bounds := 0@0 corner: 20@20. 	color := Color gray. 	self useRoundedCorners  ! !SimpleSwitchMorph subclass: #ColorButton	instanceVariableNames: 'mouseAction'	classVariableNames: ''	poolDictionaries: ''	category: 'MasterMind'!!ColorButton methodsFor: 'event handling' stamp: 'Dario Marvin 1/5/2018 11:31'!mouseUp: anEvent	mouseAction value ! !!ColorButton methodsFor: 'initialization' stamp: 'Dario Marvin 1/8/2018 13:28'!initialize	"comment stating purpose of message"	super initialize.	self label: ''. 	self borderWidth: 2. 	bounds := 0@0 corner: 30@30. 	offColor := Color darkGray. 	onColor := Color darkGray. 	self useRoundedCorners.	self turnOff! !!ColorButton methodsFor: 'accessing' stamp: 'Dario Marvin 1/5/2018 11:30'!mouseAction: aBlock	^ mouseAction := aBlock ! !SimpleButtonMorph subclass: #GenericButton	instanceVariableNames: 'mouseAction'	classVariableNames: ''	poolDictionaries: ''	category: 'MasterMind'!!GenericButton methodsFor: 'accessing' stamp: 'Dario Marvin 1/9/2018 14:21'!mouseUp: anEvent	mouseAction value ! !!GenericButton methodsFor: 'accessing' stamp: 'Dario Marvin 1/9/2018 14:21'!mouseAction: aBlock	^ mouseAction := aBlock ! !!GenericButton methodsFor: 'initialization' stamp: 'Dario Marvin 1/9/2018 14:21'!initialize		super initialize.	self borderWidth: 2. 	bounds := 0@0 corner: 80@25. 	oldColor := Color black.	color := Color black.	! !BorderedMorph subclass: #MMGame	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'MasterMind'!!MMGame commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!MMGame methodsFor: 'accessing' stamp: 'Dario Marvin 3/25/2018 12:01'!checkAnswerWithGuess: aGuess solution: aSolution	| usedColors output|		usedColors := Set new.	output := OrderedCollection new.		1 to: aGuess size do: [ :i | 		(usedColors includes: (aGuess at: i)) ifFalse: [  			((aGuess at: i) = (aSolution at: i)) ifTrue: [ 				output add: Color black.				usedColors add: (aGuess at: i).			].		].		].		1 to: aGuess size do: [ :guessIndex |		1 to: aSolution size do: [ :solutionIndex |			(usedColors includes: (aGuess at: guessIndex)) ifFalse: [ 				(((aGuess at: guessIndex) = (aSolution at: solutionIndex)) & (guessIndex ~= solutionIndex)) ifTrue: [ 					output add: Color white.					usedColors add: (aGuess at: guessIndex).				].			].		].	].	^ output	! !!MMGame methodsFor: 'instance creation' stamp: 'Dario Marvin 1/6/2018 15:55'!getFiveColors	"this method should randomly generate a non repeating sequence of 5 colors among the 8 possible"	| colors|	colors := OrderedCollection new.	colors add: Color red; add: Color orange; add: Color yellow; add: Color brown ; add: Color blue; add: Color green; add: Color white; add: Color black; yourself.		"colors do: [:a | Transcript show: a printString; cr].	Transcript show: '-----------'; cr."	colors := colors shuffled.	colors removeLast.	colors removeLast.	colors removeLast.		^ colors ! !!MMGame methodsFor: 'instance creation' stamp: 'Dario Marvin 3/25/2018 16:30'!newAnswerButtonAtRow: aRowIndex column: aColumnIndex color: aColor	| answerButton rightMargin topMargin origin|		origin := self innerBounds origin.	rightMargin := 350.	topMargin := 75.	answerButton := AnswerButton new.	self addMorph: answerButton.	answerButton position: ((rightMargin - ((aRowIndex-1)*25)) @ (topMargin + ((aColumnIndex-1)*50))) + origin.	answerButton color: aColor.	^ answerButton! !!MMGame methodsFor: 'instance creation' stamp: 'Dario Marvin 3/25/2018 18:48'!newAnswerAtRow: i column: j color: color_	| a rightMargin topMargin origin|		origin := self innerBounds origin.	rightMargin := 350.	topMargin := 75.	a := AnswerButton new.	self addMorph: a.	a position: ((rightMargin - ((i-1)*25)) @ (topMargin + ((j-1)*50))) + origin.	a color: color_.	^ a! !!MMGame methodsFor: 'instance creation' stamp: 'Dario Marvin 3/25/2018 18:23'!newColorButtonAtRow: aRowIndex column: aColumnIndex 	|colorChoice colorButton origin |    colorButton := ColorButton new.    origin := self innerBounds origin.    self addMorph: colorButton.    colorButton position: ( ((aRowIndex - 1) * 40 + 5 ) @ (((aColumnIndex - 1) * 50) +70) ) + origin.    colorButton mouseAction: [ 		colorChoice := UIManager default 		chooseFrom: #('Red' 'Orange' 'Yellow' 'Brown' 'Green' 'Blue' 'White' 'Black') 		message: 'Choose a color'.		colorChoice = 1 ifTrue: [colorButton color: Color red].		colorChoice = 2 ifTrue: [colorButton color: Color orange].		colorChoice = 3 ifTrue: [colorButton color: Color yellow].		colorChoice = 4 ifTrue: [colorButton color: Color brown].		colorChoice = 5 ifTrue: [colorButton color: Color green].		colorChoice = 6 ifTrue: [colorButton color: Color blue].		colorChoice = 7 ifTrue: [colorButton color: Color white].		colorChoice = 8 ifTrue: [colorButton color: Color black].		colorChoice = 0 ifTrue: ["ask again?"].		].   ^ colorButton! !!MMGame methodsFor: 'initialization' stamp: 'Dario Marvin 3/25/2018 18:52'!initialize	"comment stating purpose of message"	|j buttons ans b ok max solution colors answer won restart quit giveUp instructions random_ tmp|	super initialize.	self bounds: (5@5 extent: (380 @ 700) + (2 * self borderWidth)).	color := Color darkGray darker.  	j := 1.	max := 12.	won := false.		solution := self getFiveColors.	solution do: [: a | Transcript show: a printString; cr].		ok := OkButton new.	self addMorph: ok.  	ok position: ( 10 @ 10). 		buttons := OrderedCollection new.	colors := OrderedCollection new.	1 to: 5 do: [ :i |		b := self newColorButtonAtRow:i column:j.		buttons add: b.		].			ok mouseAction: [		ok color: Color white.		buttons do: [ :each | colors add: each color].		(colors includes: Color darkGray) 		ifTrue: [ UITheme builder message: 'Please select a color for all buttons!!'. colors removeAll.]		ifFalse: [  				answer := self checkAnswerWithGuess: colors solution: solution.				1 to: answer size do: [ :i | ans := self newAnswerAtRow:i column:j color: (answer at: i)].				(colors = solution) ifTrue: [won := true].		colors removeAll.				((won = false) & (j < (max)))  		ifTrue: [  			UIManager default inform: (max-j) asString, ' tentatives left!!'.			j := j+1.					buttons removeAll.			1 to: 5 do: [ :i |				b := self newColorButtonAtRow:i column:j.				buttons add: b.				].		]		ifFalse: [			((won = true) & (j <= max)) ifTrue: [UITheme builder message: 'Congratulations, you won!!']			ifFalse: 	[UITheme builder message: 'Sorry, you lost!!'].		]		 	]].		restart := GenericButton new.	self addMorph: restart.	restart label: 'Restart'. 	restart position: ( 15 @ 670). 	restart mouseAction: [ 		restart color: Color black. 		self delete.		MMGame new openInWorld.	].	quit := GenericButton new.	self addMorph: quit. 	quit label: 'Quit'. 	quit position: ( 165 @ 670). 	quit mouseAction: [ quit color: Color black. self delete. ].	giveUp := GenericButton new.	self addMorph: giveUp. 	giveUp label: 'Give up'. 	giveUp position: ( 315 @ 670). 	giveUp mouseAction: [ 		giveUp color: Color black. 		UITheme builder message: 'The solution was ', solution asString.		ok delete.	].		instructions := GenericButton new.	instructions label: 'Instructions'.	self addMorph: instructions.  	instructions position: ( 255 @ 12). 	instructions mouseAction: [ instructions color: Color black. UITheme builder message: 'Here are the rules:', String cr, String cr, '1. You have to guess the combination of five non repeating colors between red, green, blue, yellow, white, black, orange or brown.', String cr, String cr, '2. A black circle means one color is in the combination at the right place, while a white circle means a color is in the combination, but at the wrong place.', String cr, String cr, '3. You have 12 attempts. If you''ve not guessed the right combination by then, you''ll lose.', String cr, String cr, '4. Have fun ^-^'].		random_ := GenericButton new.	random_ label: 'Try a random combination'.	self addMorph: random_.  	random_ position: ( 212 @ 43). 	random_ mouseAction: [ 		random_ color: Color black.		tmp := self getFiveColors.		1 to: buttons size do: [ :i | (buttons at: i) color: (tmp at: i)].	]	! !SimpleButtonMorph subclass: #OkButton	instanceVariableNames: 'mouseAction'	classVariableNames: ''	poolDictionaries: ''	category: 'MasterMind'!!OkButton methodsFor: 'accessing' stamp: 'Dario Marvin 1/5/2018 16:56'!mouseUp: anEvent	mouseAction value ! !!OkButton methodsFor: 'accessing' stamp: 'Dario Marvin 1/5/2018 16:56'!mouseAction: aBlock	^ mouseAction := aBlock ! !!OkButton methodsFor: 'initialization' stamp: 'Dario Marvin 1/9/2018 11:15'!initialize		super initialize.	self label: 'Check'.	color := Color white.	label position: 80@20.	label color: Color black.	self borderWidth: 2. 	bounds := 0@0 corner: 190@60. 		! !